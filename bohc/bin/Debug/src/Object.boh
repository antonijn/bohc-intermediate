package boh.lang;public class Object{	public virtual String toString()	{		Vector3<float> floats = new Vector3<float>(10, 20, 30);		Vector3<String> strings = new Vector3<String>("Hello, ", "world!", null);			try		{			decimal dec = 100dd;			int first = 1;		}		catch (Exception e)		{			int second = 2;		}		finally		{			int third = 3;		}			return getType().getName();	}		public virtual long hash()	{		return native.boh_force_cast(this);	}		public virtual Type getType()	{		return typeof(Object);	}		public virtual boolean equals(Object other)	{		return other r_eq this;	}		public static boolean is(Object o, Type t)	{		if (o == null || t == null)		{			return false;		}			return o.getType().isSubTypeOf(t);	}		public static boolean valEquals(Object l, Object r)	{		boolean lNull = l r_eq null;		boolean rNull = r r_eq null;				if (lNull && rNull)		{			return true;		}		if (lNull || rNull)		{			return false;		}				return l.equals(r);	}}