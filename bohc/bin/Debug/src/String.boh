package boh.std;

public class String
{
	public static final String empty = "";
	
	private this(String str, int offset, int length)
	{
		this.chars = str.chars;
		this.offset = offset + str.offset;
		this.length = length;
	}
	
	public this(int length)
	{
		char dummy = default(char);
		this.chars = native.GC_malloc(length * native.sizeof(dummy));
		this.offset = 0;
		this.length = length;
		for (int i = 0; i < length; ++i)
		{
			set(i, dummy);
		}
	}
	
	public static boolean isNullOrEmpty(String str)
	{
		return str == null || str.length == 0;
	}
	
	public override boolean equals(Object other)
	{
		if (other.getType() != typeof(String))
		{
			return false;
		}
		
		String str = (String)other;
		if (str.length != length)
		{
			return false;
		}
		
		for (int i = 0; i < length; ++i)
		{
			if (str.get(i) != get(i))
			{
				return false;
			}
		}
		
		return true;
	}
	
	public char get(int i)
	{
		return native.boh_deref_ptr(chars, offset + i);
	}
	
	private char set(int i, char ch)
	{
		return native.boh_set_deref(chars, offset + i, ch);
	}
	
	public String substring(int idx)
	{
		return new String(this, idx, length - idx);
	}
	
	public String substring(int idx, int len)
	{
		return new String(this, idx, len - idx);
	}
	
	public int indexOf(char ch)
	{
		for (int i = 0; i < length; ++i)
		{
			if (get(i) == ch)
			{
				return i;
			}
		}
		
		return -1;
	}
	
	public int count(char ch)
	{
		int result = 0;
		for (int i = 0; i < length; ++i)
		{
			if (get(i) == ch)
			{
				++result;
			}
		}
		return result;
	}
	
	public String[] split(char ch)
	{
		String[] res = new String[count(ch) + 1];
		int i = 0;
		int idx = 0;
		int prev = 0;
		while ((idx = indexOf(ch)) != -1)
		{
			res.set(i, substring(prev, idx - prev));
			++i;
			prev = idx;
		}
		res.set(i, substring(idx, length - idx));
		return res;
	}
	
	public static String +(String left, String right)
	{
		String res = native.create_str_by_len(left.length + right.length);
		for (int i = 0; i < left.length; ++i)
		{
			res.set(i, left.get(i));
		}
		for (int i = 0; i < right.length; ++i)
		{
			res.set(i + left.length, right.get(i));
		}
		return res;
	}

	private int offset;
	private int length;
	private native.char* chars;
}
